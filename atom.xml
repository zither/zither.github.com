<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[MiniThinker]]></title>
	<subtitle>努力学习那些想要知道的东西</subtitle>
	<link href="http://blog.minimee.org/atom.xml" rel="self" />
	<link href="http://blog.minimee.org/" />
	<id>urn:uuid:6b18cbf9-83ff-86cd-1c01-f6fa3c1a351c</id>
	<updated>2014-08-16T19:51:13+08:00</updated>
	<author>
		<name><![CDATA[Minimee]]></name>
		<uri>http://blog.minimee.org/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[如何开发页游之地图设定]]></title>
		<link href="http://blog.minimee.org/article/2014/08/16/game-map" />
		<id>urn:uuid:f737dd8c-91e5-cc30-39b1-c00bca1311ba</id>
		<updated>2014-08-16T19:04:34+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;经过思考决定修改之前 Demo 中地图的一些相关设定。按照之前的设定，人物可以在地图中自由移动，地图属性的颗粒也相对较小（比如距离、类型）。这样设定的好处是可以让角色移动更加接近普通 RPG 中移动效果，服务器也可绘制更加精细的地图。但是从 Demo 的效果来看，这种实现体验并不好。脱离了地图的直观感受，玩家需要强制记忆地图坐标，完成一个简单任务也可能需要通过数次移动，更容易疲倦。&lt;/p&gt;
&lt;p&gt;我的目标是做一个休闲的文字页游，尽可能的缩减鼠标操作也是需求之一。为了减少角色移动带来的操作，需要放大地图格子的比例。在 Linodas 中地图是以城镇为中心的，如果一个城镇相当于一个格子的话，它的地图只有13格，也就是说角色不是在地城副本就是在城市中。我希望游戏中的世界能够更加“宽阔”一些，角色不仅仅是在城市中，也可以是在草原或者山谷。我把放大后的地图格子叫做“场景”，每一个格子就是一个场景。角色仍然可以在地图中移动，但是由于地图比例的放大，也会增加一些额外的东西来作为移动条件，比如食物和水。&lt;/p&gt;
&lt;p&gt;当然，在每个场景中可以采用 Linodas 中地城相似的设定，通过增加不同的子场景来让场景内容更加丰富。这部分需要在新的 demo 做出来之后再继续讨论。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[如何开发网页游戏]]></title>
		<link href="http://blog.minimee.org/article/2014/08/16/how-to-make-a-web-game" />
		<id>urn:uuid:5f7f2f3a-e292-79d7-8ba0-2f713b106151</id>
		<updated>2014-08-16T09:53:34+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;题目中的话是疑问句。我最近在想怎么做一个网页游戏，但是由于从未涉及过相关知识，这个过程对我来说有些陌生。&lt;/p&gt;
&lt;p&gt;开发网页游戏的技术有很多种，最成熟的当属 flash 游戏，而当前热门的则应该是 HTML 5 以及 Unity 3D。从画面来说，现在的网页游戏已经可以媲美端游了。不过我的兴趣点却恰恰相反，我更喜欢 &lt;a href=&quot;http://candybox2.net/&quot;&gt;Candy box&lt;/a&gt; 以及 &lt;a href=&quot;http://www.linodas.com/&quot;&gt;Linodas&lt;/a&gt; 类似的文字游戏。&lt;/p&gt;
&lt;p&gt;Candy box 好玩但由于是单机内容不够丰富，而 Linodas 内容丰富但行动点的设定很大程度上抑制了玩家的热情。这其中涉及到了游戏对于玩家之间的平衡问题。我希望有这样一款文字页游，游戏背景是不断变化的，可以持续性的玩下去，玩家之间可以有一定的交互，但是在线时长不会造成玩家之间的根本性的差距。换种方式说就是我一直当单机玩也可以体验绝大部分游戏乐趣，每天只用很少的时间来玩也不会被其他玩家碾压。&lt;/p&gt;
&lt;p&gt;Linodas 的冒险模式应该就是在往这个方向努力，但是这个功能目前还未开放，每天把少量的行动点数用完就不能做其他事情了。所以我准备给自己写一个页游，尽可能的满足自己的需求。&lt;/p&gt;
&lt;p&gt;新页游暂被设定为生存类，玩家随机出生在地图的某个位置，然后通过采集或猎杀来获取资源，不断制造工具，让自己活下去。这是一个很普通的生存类游戏设定，但是实现方式上还需要仔细的考虑。之前参考常规方式实现了一下&lt;a href=&quot;http://justadust.sinaapp.com/game&quot;&gt;地图 demo&lt;/a&gt;，但是不管是在移动操作还是体验上都比较差，频繁的点击以及过快的移动很容易迷失方向。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[谁动了我的 php.vim]]></title>
		<link href="http://blog.minimee.org/article/2014/03/23/who-changed-my-php-vim" />
		<id>urn:uuid:b8e64e6b-7392-1cd8-4df6-3e7d2abb1fda</id>
		<updated>2014-03-23T17:59:17+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;最近发生了一个非常诡异的事情，我的 vim 语法高亮竟然自动变了！在&lt;a href=&quot;http://blog.minimee.org/article/2014/03/20/the-problem-of-vim-css-color&quot;&gt;前一篇博客&lt;/a&gt;中我提到过：从我使用 vim 编辑器以来，color scheme 一直都是 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2536&quot;&gt;lucius&lt;/a&gt;。它之前的模样可以在&lt;a href=&quot;http://minimee.org/vim/&quot;&gt;这篇介绍&lt;/a&gt;中看到。&lt;/p&gt;
&lt;p&gt;从图片中可以看到 php 注释要比 php 普通代码的颜色要暗很多，不会吸引到视觉焦点，这也是我选择 color scheme 最重要的标准之一。但是最近它竟然自己把颜色给换了，难道注释也变得不甘寂寞了么？&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;http://ww1.sinaimg.cn/large/86e701f8gw1eepv20rot2j21ao07xdgn.jpg&quot;&gt;这张图片&lt;/a&gt;可以看到，注释中部分文字改变了高亮颜色！奇怪的是最近我并没有任何更新 vim 的操作，我也不知道为什么变成了这样。在更换了多个 color scheme 之后发现，这个问题影响到了所有的 color scheme，也就是说问题与 color scheme 自身没有关系。而是 vim highlight groups 中混入了奇怪的东西。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-vimL&quot;&gt;hi Comment          guifg=#808080           gui=none
hi Comment          ctermfg=243             cterm=none&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这几行代码是 lucius 配色中关于注释的颜色设置，现在我需要找到混在 Comment group 中的其他 group。这时可以祭出 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=383&quot;&gt;SyntaxAttr.vim&lt;/a&gt; 这件大杀器，它的功能很简单，就是可以获取鼠标所在文字的 highlight group 信息。插件安装成功之后可以使用以下命令来获取 highlight group 信息：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-vimL&quot;&gt;:call SyntaxAttr()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;利用这个插件我找到了注释中高亮部分的 highlight group：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-vimL&quot;&gt;group: phpDocTags-&amp;gt;PreProc guifg=#efefaf(#efefaf)
group: phpDocCustomTags-&amp;gt;Type guifg=#93e690(#93e690)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;很显然，在 lucius scheme 之中并没有定义与这两个 group 相关的设置，关于这两个 group 的定义可以在 vim 的 syntax/php.vim 中找到：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;syntax match  phpDocCustomTags  &quot;@[a-zA-Z]*\(\s\+\|\n\|\r\)&quot; containedin=phpComment
syntax region phpDocTags  start=&quot;{@\(example...\|tutorial\)&quot; end=&quot;}&quot; containedin=phpComment
syntax match  phpDocTags  &quot;@\(abstract\....\|throws\)\(\s\+\)\?&quot; containedin=phpComment&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后为了让这两个不安分的 highlight group 低调一点，我直接在 lucius scheme 中添加了如下两行设置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;hi phpDocTags       guifg=#808080                                   gui=none
hi phpDocCustomTags guifg=#808080                                   gui=none&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后整个 vim 又恢复到之前的宁静了。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[vim-css-color 严重降低 vim 启动速度]]></title>
		<link href="http://blog.minimee.org/article/2014/03/20/the-problem-of-vim-css-color" />
		<id>urn:uuid:9e38c325-21d4-dbe7-2b06-db724cc6295a</id>
		<updated>2014-03-20T12:11:09+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;因为一直使用 vim-gtk 的缘故，我其实很少使用 vim 进行编程，color scheme 更是一直使用 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2536&quot;&gt;lucius&lt;/a&gt;。不过最近有些工作必须要在终端下完成，为了改善在 vim 中编程的体验，我还是决定升级下终端版本，并专门把 vim 的配色更换为 &lt;a href=&quot;https://github.com/chriskempson/tomorrow-theme&quot;&gt;Tomorrow-Night&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我使用的终端是 rxvt-unicode，默认为88色，而 Tomorrow-Night 的 256 色要比 88 色看起来舒服很多，所以我直接把 rxvt-unicode 换成了 rxvt-unicode-256color。没想到在终端更换完毕之后出现了一个问题：用 vim 打开文件的速度变得非常慢，最少需要4-5秒左右。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;使用如下命令来查看 vim 的启动过程耗费的时间：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-php&quot;&gt;vim --startuptime timefile test.php&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这个命令会打开 test.php 文件并在当前目录生成一个名为 timefile 的启动日志文件。然后我在日志文件中找到了拖慢 vim 启动速度的真凶：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-php&quot;&gt;191.477  004.767  004.767: sourcing /usr/share/vim/vim74/syntax/vb.vim
4279.165  4087.443  4087.443: sourcing /home/chou/.vim/bundle/css_color.vim/syntax/css.vim&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从日志中可以看到，大部分时间都被用于加载这个名为 css_color.vim 的插件。话说这个插件比较好玩，特别是对于经常接触前端的朋友，它可以自动修改文件中表示各种颜色格式文字（比如 #ffffff）的背景，然后让人可以直观的看到这些数字组成的颜色。我当即在 .vimrc 配置中去掉了这个插件，然后 vim 的启动速度恢复正常。&lt;/p&gt;
&lt;p&gt;随手 google 了一下，发现非常多的人在 &lt;a href=&quot;https://github.com/skammer/vim-css-color/issues/3&quot;&gt;github issue&lt;/a&gt; 上提出了这个问题，但是作者未作任何回复。大致是由于插件的 rgb2xterm 函数效率过低。不过有好心的网友自己对这个问题进行了更新修复，更新后的插件可以在这里找到：&lt;a href=&quot;https://github.com/ap/vim-css-color&quot;&gt;&lt;a href=&quot;https://github.com/ap/vim-css-color&quot;&gt;https://github.com/ap/vim-css-color&lt;/a&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之前在 88 色终端下并未发现这个问题是由于插件在开头添加了这样一行环境检测代码：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-vimL&quot;&gt;if !( has(&#039;gui_running&#039;) || &amp;amp;t_Co==256 ) | finish | endif&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;PS：我顺手安装测试了一下网友修正过的插件，启动速度很快，推荐使用。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Feed 解析那些库]]></title>
		<link href="http://blog.minimee.org/article/2014/03/13/feedparser" />
		<id>urn:uuid:c6ee9e6a-221b-760e-a87f-ae3e66e03fdd</id>
		<updated>2014-03-13T10:26:53+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;前几天做了一个比较小的项目，大部分功能都涉及到 feed 解析。关于 feed 解析我之前也写过相关的代码，因为所需 feed 的情况都在自己的控制之内，当时使用的是自己写的一个解析类。这次项目要求要更加通用一些，所以在进行过程搜索了各种开源的 feed 解析库。&lt;/p&gt;
&lt;p&gt;最先关注到的解析库是 SimplePie，它的功能比较齐全，基本上支持全格式的 feed 解析，还包括了转码缓存等功能。不过在解析中文订阅的时候会出现将中文编码为 HTML Entities 的问题。随手 google 了一下，发现有人已经遇到过相同的问题：&lt;a href=&quot;http://blog.webfuns.net/archives/1710.html&quot;&gt;SimplePie 将中文编码成 HTML Entities 的解决办法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;文中已经说明出现这个问题的原因，并且给出了一个解决办法，不过修改方法不太清楚，这里详细说一下：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-php&quot;&gt;// 修改的内容在 SimplePie_Sanitize 类的 sanitize 方法中
class SimplePie_Sanitieze
{
    // 忽略无关的内容
    // ...
    // ...

    public function sanitize($data, $type, $base = &#039;&#039;)
    {
        // 忽略无关内容
        // ...
        // ...

        if ($type &amp;amp; (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))
        {
            $document = new DOMDocument();
            $document-&amp;gt;encoding = &#039;UTF-8&#039;;

            // 增加一下两行代码
            $unique_tag = &#039;#&#039; . uniqid() . &#039;#&#039;;
            $data = $unique_tag . $data . $unique_tag;

            $data = $this-&amp;gt;preprocess($data, $type);
            // 继续忽略无关内容
            // ...
            // ...

            // 直接注释下面这两行代码
            //$real_body = $document-&amp;gt;getElementsByTagName(&#039;body&#039;)-&amp;gt;item(0)-&amp;gt;childNodes-&amp;gt;item(0);
            //$document-&amp;gt;replaceChild($real_body, $document-&amp;gt;firstChild);

            $data = trim($document-&amp;gt;saveHTML());

            // 最后在添加下面这行代码
            list($_, $data, $_) = explode($unique_tag, $data);

            // ...
            // ...
        }
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;除了 SimplePie 之外还在 Github 上找到一个非常小的解析库：&lt;a href=&quot;https://github.com/dzeban/FeedParser&quot;&gt;FeedParser&lt;/a&gt;。这个库的功能相比 SimplePie 要简陋太多，不过好在它足够简单，源代码看完想怎么改就怎么改。FeedParser 的作者也是因为自己需要而写的，最后更新在 3 年之前，提供的接口是使用 XPath 硬查询的，所以如果有特殊的需求需要自己修改代码。我自己使用的时候也添加过一些简单的接口，代码放在：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// FeedParser Github repo
https://github.com/dzeban/FeedParser
// 我小小修改过的
https://github.com/zither/FeedParser&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;总的来说，FeedParser 适合自己玩，正规一些的项目可以考虑使用 SimplePie。&lt;/p&gt;]]></summary>
	</entry>
</feed>