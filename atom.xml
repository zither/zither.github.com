<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[MiniThinker]]></title>
	<subtitle>努力学习那些想要知道的东西</subtitle>
	<link href="http://blog.minimee.org/atom.xml" rel="self" />
	<link href="http://blog.minimee.org/" />
	<id>urn:uuid:6b18cbf9-83ff-86cd-1c01-f6fa3c1a351c</id>
	<updated>2014-10-08T16:37:00+08:00</updated>
	<author>
		<name><![CDATA[Minimee]]></name>
		<uri>http://blog.minimee.org/</uri>
	</author>
	<entry>
		<title type="html"><![CDATA[Vagrant 与 LFS]]></title>
		<link href="http://blog.minimee.org/article/2014/10/08/vagrant-and-lfs" />
		<id>urn:uuid:7722530e-26d1-615a-a3c6-3c8aa51cf774</id>
		<updated>2014-10-08T11:45:20+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;这几天一直在折腾迁移之前的开发环境。我现在使用的系统只划分了 /、/home、/boot 以及 swap 这几个分区，开发环境则沿用了 Apache 的 /var/www 目录。这样带来的问题是每次系统崩溃需要重装时就必须用 live CD 进行备份数据，重装后还需要还原开发环境，我希望以后能尽量避免类似的情况。另外最近可能还有跨平台的开发需求，这也提高了保证开发环境一致性的难度，所以决定把开发环境迁移到 Vagrant 上来。&lt;/p&gt;
&lt;p&gt;Vagrant 是一款构建虚拟开发环境的工具，可以简单的把它理解成一个集成开发环境的虚拟机。我们可以把代码目录放在宿主系统上，而代码的运行环境则由 Vagrant 来提供。Vagrant 的安装与配置非常简单，大致过程可以参照 Segmentfault 的文章：「&lt;a href=&quot;http://segmentfault.com/blog/fenbox/1190000000264347&quot;&gt;使用 Vagrant 打造跨平台开发环境&lt;/a&gt;」。现在我已经把自己最常用的 LNMP 开发环境通过 Vagrant 打包，然后把开发目录迁移到了 /home 分区下面，整个过程非常顺利。&lt;/p&gt;
&lt;p&gt;在使用自己制作的 Vagrant 包的时候可能会出现：「_Vagrantfile:5: warning: already initialized constant VAGRANTFILE_API_VERSION」的问题。这是因为我们把已经配置好的 Vagrantfile 配置也打包到了里面，还原开发环境时（vagrant init）也会自己生成一个 Vagrantfile 配置文件，在这两个配置文件中重复定义了 VAGRANTFILE_API_VERSION 这个常量。从&lt;a href=&quot;https://docs.vagrantup.com/v2/vagrantfile/index.html&quot;&gt;官方文档&lt;/a&gt;中得知 Vagrant 使用 ruby 来解释它的配置文件，并且项目目录下的配置会覆盖 package 中的配置，所以只需要用以下方式修改 ~/.vagrant.d 中对应的 _Vagrantfile 即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// 只需检测是否之前已经定义过该常量
if !defined? VAGRANTFILE_API_VERSION
    VAGRANTFILE_API_VERSION = &quot;2&quot;
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;这虽然能够修正这个错误，但是每次还原都这样修改依然很麻烦。我推荐使用这种方法修改项目目录中的 Vagrantfile，然后重新打包。&lt;/p&gt;
&lt;p&gt;另外，我花了近 30 个小时的时间达成了成功安装 LFS 系统的成就。在迁移完开发环境之后我发现 Vagrant 包竟然有近 600M，后来在寻找更小巧的 Base 镜像时发现了一个超小的 LFS 镜像，这让我对 LFS 的兴趣大增。恰好国内恰好有完整的 LFS 安装手册，为了以后能更好的使用  linux，我决定在虚拟机里把整个安装过程跑一遍，好处多多。&lt;/p&gt;
&lt;p&gt;这里有几点关于安装 LFS 的心得可以记录一下。如果是第一次尝试安装的话，强烈推荐下载包含完整源码的 live CD，我安装的时候直接下了一个 mini 镜像，源码都是安装时再下载，导致频繁的在宿主环境与 chroot 环境中切换，并且手册中给出的下载地址很多已失效，还需要搜索相关的 LFS mirror，非常费时。按照手册的步骤完整基本上不会出现太大的问题，我只在第六章安装 file 和 man-db 时遇到了 zlib.h 和 db.h 等头文件无法找到的问题，自己把 /usr/include 加入到 C_INCLUDE_PATH 和 CPLUS_INCLUDE_PATH 环境变量即可。&lt;/p&gt;
&lt;p&gt;其实最可能遇到的问题应该是安装完成之后的网络设置部分，很多人都可能遇到 eth0 dosent exist 的问题。这里需要在编译 kernel 时添加相关驱动模块的支持。解决这个问题最简单的办法就是在宿主系统上使用 &lt;code&gt;lspci | grep -i Ethernet&lt;/code&gt; 命令查看网卡参数，然后在 kernel 里选择合适的模块。其实究其根本，还是因为平常使用中很少会涉及到内核部分，对其众多的参数没有基本的了解。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[新一轮晒桌面开始]]></title>
		<link href="http://blog.minimee.org/article/2014/09/29/new-system-screenshot" />
		<id>urn:uuid:a54bfe5c-8807-78e8-5d19-98bf17d4eac6</id>
		<updated>2014-09-29T15:26:06+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;&lt;img alt=&quot;openbox&quot; src=&quot;http://ww4.sinaimg.cn/large/86e701f8gw1ektde2c28kj21ao0t6ti8.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;据可靠日期记录，我持续使用了近一年半的 Debian sid 系统终于被我滚挂了。事情的起因要归结到这两天被大家玩坏了的 bash 漏洞，一直采用超惰性升级的我，在为这个漏洞打补丁的时候顺手滚动升级了一下系统软件，然后就没有然后了。这次崩溃非常彻底，以前出问题最多是无法启动 x-window，这次连 /sbin/init 都无法启动了，提示说 segment fault。期间尝试了很多种修复方案，但未能见效。&lt;/p&gt;
&lt;p&gt;无奈之下只好重新安装 Debian，采用一贯的硬盘启动网络安装的方式，过程非常顺利。未料到的是在我辛苦调教好 openbox，重启之后崩溃再现，仍然无法启动 /sbin/init 进程。令人疑惑的是我在新系统上没有做任何危险操作，只是安装了 openbox，docky 等几个我常用的软件而已。继续重装，然后这个过程重复了 4 次，我尝试了 Debian testing 和 sid 两个版本以及几个常用的桌面环境，都无一例外的在重新安装 openbox 环境重启之后崩溃。&lt;/p&gt;
&lt;p&gt;因为手里没有 Linux 的系统盘，很多检查工具用不了，就直接尝试安装其他的 Linux 发行版了。考虑到使用习惯，选择了自带 openbox 的 lubuntu 发行版，图片中就是最后的调教效果，已经非常接近之前的样式了，只是换了一下壁纸。其实 lubuntu 自带的主题也挺好看的（如下图），但是与 conky 有兼容性问题。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;lubuntu&quot; src=&quot;http://ww3.sinaimg.cn/large/86e701f8gw1ektdcl5te6j21ao0t6k0q.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这张图就是 lubuntu 默认主题，只是换了一下图标而已。另外需要说到的就是开源的显卡驱动进步了很多，没有出现之前风扇狂转的问题了，但是在登录之后仍然有花屏的现象。暂时先这样用着，过段时间再考虑需不需要换到闭源驱动。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[Mreader for android]]></title>
		<link href="http://blog.minimee.org/article/2014/09/25/mreader-for-android" />
		<id>urn:uuid:8e5cfd4c-4543-d2bb-e493-7fd69bde6a2d</id>
		<updated>2014-09-25T12:11:52+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;&lt;img alt=&quot;Mreader for android&quot; src=&quot;http://ww2.sinaimg.cn/large/86e701f8gw1ekoleq5h14j20xc0m8413.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;经过这几天的折腾，我的第一个 Android app 诞生了。它是之前重写过的 &lt;a href=&quot;http://mreader.sinaapp.com&quot;&gt;Mreader&lt;/a&gt; 的安卓版本，因此也是一个只能我自己使用的安卓应用。它实现了几个非常简单的功能，可以获取 Mreader 订阅中的未读文章以及星标文章列表，点击列表后可以直接在应用中查看文章内容。&lt;/p&gt;
&lt;p&gt;这款应用的开发完全是在计划之外，突然想给 Mreader 开发一个专属应用，然后就直接开始了。从脑袋中有了想法到应用雏形的完成只用了一天时间。由于之前完全没有 Android 开发经验，也没有学过 Java，整个开发过程完全是由需求驱动，不停的各种搜索学习。应用雏形是在 Eclipse 中完成的，大致了解之后又迁移到了 Android studio。&lt;/p&gt;
&lt;p&gt;应用虽然简单，学到的东西却不少。在短短的几天时间里了解了安卓开发的环境搭建，开发流程以及安卓应用大致结构，我可以说手里又多了一把锤子了么？其实应用开发和网页开发有着非常多的共同之处，这也是能快速上手的关键原因。另外，搜索用多了就会知道中文内容的质量低到了什么程度，以后还是直接用英文搜索技术问题吧。&lt;/p&gt;
&lt;p&gt;最后需要感谢 &lt;a href=&quot;http://ffra.deviantart.com/art/MAXIMAL-Icons-Updated-387287801?q=gallery%3AFFra/43722907&amp;amp;qo=2&quot;&gt;FFra&lt;/a&gt;，Mreader for android 直接使用了 Ta 设计的应用图标，非常漂亮。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[莉诺达斯木桩系统]]></title>
		<link href="http://blog.minimee.org/article/2014/09/18/Combat-Simulation-System-of-Linodas" />
		<id>urn:uuid:35daa28f-c6ba-fac1-76f3-024b2e0007b1</id>
		<updated>2014-09-18T19:14:13+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;自从开始尘埃的策划之后，很用心的玩了几款文字游戏，比如 Linodas、Estiah、World of dungeons。玩得比较久，比较喜欢的要算 Linodas，他是国内个人仿制 Estiah 的成果。虽然莉诺达斯的玩家并不是很多，但是活跃度很不错，玩家间交流比较频繁。仅仅是这点就可以超过 wod 了，我能说我的 wod 帐号到现在才升到 4 级嘛，新手副本对单人非常不友好，经常半路被撸晕拖回来。&lt;/p&gt;
&lt;p&gt;在玩莉诺达的过程中，也在思考尘埃的一些设定，比如战斗方式之类。并且花了两三天时间制作了一个&lt;a href=&quot;http://linodas.sinaapp.com&quot;&gt;莉诺达斯木桩系统&lt;/a&gt;，不仅可以方便的进行卡组对比，也能了解背后的计算过程。不过由于本人玩了一个来月等级也才只有15级，非常多的高级卡片拿不上，所以有些卡片属性还不能完全支持。当然，以后等级上来了，相应的功能也会添加上去。&lt;/p&gt;
&lt;p&gt;如果你无意间看到这篇文章，并且也玩莉诺达斯，欢迎测试使用：&lt;a href=&quot;http://linodas.sinaapp.com&quot;&gt;&lt;a href=&quot;http://linodas.sinaapp.com&quot;&gt;http://linodas.sinaapp.com&lt;/a&gt;&lt;/a&gt;。&lt;/p&gt;]]></summary>
	</entry>
	<entry>
		<title type="html"><![CDATA[重写了 Mreader]]></title>
		<link href="http://blog.minimee.org/article/2014/09/10/new-version-of-mreader" />
		<id>urn:uuid:98e69108-463f-4bcf-8201-fe64438c70b7</id>
		<updated>2014-09-10T17:44:01+08:00</updated>
		<summary type="html"><![CDATA[&lt;p&gt;&lt;a href=&quot;http://mreader.sinaapp.com&quot;&gt;Mreader&lt;/a&gt; 是我自己写的一个 Feed 聚合工具，第一个版本诞生于 2013 年 5 月。当时写 Mreader 的原因是 Google reader 即将关闭，虽然那段时间出现了非常多的 Google reader 替代品，但是由于稳定性的原因没有使用它们。后来就花了几天时间自己写了一个简陋的 Web 聚合，然后一直使用到 &lt;a href=&quot;http://digg.com/reader&quot;&gt;Digg reader&lt;/a&gt; 的发布。&lt;/p&gt;
&lt;p&gt;Digg reader 算是 Google reader 的最佳替代品，我也一直使用到现在。不过最近国类又开始封锁国外的各种服务，在没有出墙的情况下，Digg reader 的良好体验被大大的降低了。然后我又一次想到了已经被搁置很久的 Mreader，决定花两天时间把它重写了一遍。基本的订阅功能今天已经完成了，前端方面基本直接 Copy 了我另一个小站的样式。&lt;/p&gt;
&lt;p&gt;现在还有「星标」功能没有完成，我认为这是 Feed 聚合最重要的功能。Google reader 受到那么多人的喜欢，很大程度是因为能通过它找到很多相关网站已经消失的文章。所以我也打算在 Mreader 上永久保存我认为值得收藏的一些博客文章。这需要考虑到图片防盗链的问题，我准备只把「星标」文章的图片抓取到本地进行保存，方便以后查看。&lt;/p&gt;]]></summary>
	</entry>
</feed>